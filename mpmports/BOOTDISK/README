Basic disk lay-out:
===================

        inodes      description

/       1
/boot   1           bootloader
/image  1           kernel image


Kernel image contents:
======================

kernel pm fs rs ds tty memory log init
All are vanilla 3.1.2a kernel versions, except for memory.


Memory contents:
================

the memory driver + a ramdisk image (imgrd)


imgrd lay-out:
==============

/bin
    rescue sh [which is not sh, but boottool]
/dev
    all devices
/etc
    mtab
/usr
    empty mountpoint
/usr.bz2
    compressed image of 4096kB /usr filesystem


usr filesystem lay-out:
=======================

whatever you want


boot sequence:
==============

MBR --> /boot --> /image
kernel does its bits
memory initializes ramdisk on /
init starts /bin/sh /etc/rc     [/bin/sh is boottool]
boottool starts /bin/rescue
boottool uncompresses /usr.bz2 to /dev/rescue
boottool mounts /dev/rescue on /usr
boottool starts /usr/bin/sh /usr/etc/rc

If you need more files in /etc, like passwd, group, termcap, ttytab, et cetera
you should put them in /usr/etc and have /usr/etc/rc move them in place. That
way, they are compressed on disk. The first action of /usr/etc/rc has to be
removing /usr.bz2 to make room on the root filesystem.


How to save even more space and include even more applications in usr.bz2?
==========================================================================

Currently, the following stuff is uncompressed on the floppy:

bootloader, kernel, pm, fs, rs, ds, tty, log, init, sh, service, mount, bzip2
rescue, memory (the driver part)

* Lazybox

Inside the usr.bz2 image, use lazybox for all common utilities. That is a HUGE
spacesaver. Depending on the number of compiled-in utilities, savings range
from 60-75% and that does NOT include the additional bzip2 compression.
Perhaps I should add service and sh to lazybox.

* Start with less devices in /dev within imgrd

[UPDATE: this has been (partially) implemented. Perhaps I could do with even
less devices/inodes, but that saves nothing. Do not forget to create /dev/imgrd
later by hand, because MAKEDEV does not do that]

Removing all the devices saves ~16kB. A few cannot be removed, namely: imgrd,
rescue, null and probably a few tty's. After that, put the MAKEDEV script in
/usr/bin and have /usr/etc execute it. A compressed MAKEDEV script is just a
little over 2kB. A handmade script that makes just that what we need could
even be a couple of hundred bytes smaller. Perhaps /dev could be removed and
symlinked to /usr/dev before running MAKEDEV. That way, we could drasticly
decrease the number of inodes of the root filesystem.

* bunzipping bootloader

Rewrite the bootloader and have it uncompress the kernel image on-the-fly. This
will result in the cleanest disk lay-out (bootloader, image.bz2 and image
contains an imgrd that has all the applications installed without the need for
additional uncompression and /dev/rescue tricks). Cleaner, but a lot harder
to implement and currently not worth the effort.

* use 7zip

Perhaps less challenging than having a bunzipping bootloader is porting
7zip/LZMA to Minix. Unless the (de)compression program binary is a lot larger
than bzip2, this could be usefull, as 7zip is able to compress up to 15%
smaller than bzip2 (relative to the compressed bz2 filesize).

* 7unzipping bootloader

et cetera... :)

* strip dialog or rewrite

Currently, I (plan to) use dialog for all user interaction. Dialog is
relatively huge, as it links with ncurses. The dialog binary is circa 270kB
and bzip-compressed it's around 122kB. It might be beneficial to rip out all
the widgets I do not need or to rewrite it all together to use ANSI escape
sequences and forget about (n)curses.

