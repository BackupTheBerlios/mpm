Basic disk lay-out:
===================

        inodes      description

/       1
/boot   1           bootloader
/image  1           kernel image


Kernel image contents:
======================

kernel pm fs rs ds tty memory log init
All are vanilla 3.1.2a kernel versions, except for memory.


Memory contents:
================

the memory driver + a ramdisk image (imgrd)


imgrd lay-out:
==============

/bin
    service sh rescue mount bzip2
/dev
    all devices
/etc
    mtab rc
/usr
    empty mountpoint
/usr.bz2
    compressed image of 4096kB /usr filesystem


usr filesystem lay-out:
=======================

whatever you want


boot sequence:
==============

MBR --> /boot --> /image
kernel does its bits
memory initializes ramdisk on /
init starts /bin/sh /etc/rc
/etc/rc starts /bin/rescue
/etc/rc uncompresses /usr.bz2 to /dev/rescue
/etc/rc mounts /dev/rescue on /usr
/etc/rc start /usr/etc/rc

If you need more files in /etc, like passwd, group, termcap, ttytab, et cetera
you should put them in /usr/etc and have /usr/etc/rc move them in place. That
way, they are compressed on disk. The first action of /usr/etc/rc has to be
removing /usr.bz2 to make room on the root filesystem.


How to save even more space and include even more applications in usr.bz2?
==========================================================================

Currently, the following stuff is uncompressed on the floppy:

bootloader, kernel, pm, fs, rs, ds, tty, log, init, sh, service, mount, bzip2
rescue, memory (the driver part)

* One way to save more space would be:

Remove sh, service, mount en bzip2 (which is 198kB) and replace it with a
handcoded utility that starts rescue like service does, uncompresses usr.bz2
to /dev/rescue, mounts /dev/rescue on /usr and start /usr/bin/sh /usr/etc/rc.
The idea is that such a utility will be much smaller than sh/bzip2/service/mount
combined and the total amount of diskspace of such a utility plus compressed
versions of sh/bzip2/service/mount inside usr.bz2 is still smaller, thus
leaving more room for other applications in usr.bz2

Such a utility would be smaller because it does not contain all the shell code,
only contains the uncompression part of libbz2 and does exactly what it needs
to do without any overhead.

* Lazybox

Inside the usr.bz2 image, use lazybox for all common utilities. That is a HUGE
spacesaver. Depending on the number of compiled-in utilities, savings range
from 60-75% and that does NOT include the additional bzip2 compression.
Perhaps I should add service and sh to lazybox.

* Start with less devices in /dev within imgrd

[UPDATE: this has been (partially) implemented. Perhaps I could do with even
less devices/inodes, but that saves nothing. Do not forget to create /dev/imgrd
later by hand, because MAKEDEV does not do that]

Removing all the devices saves ~16kB. A few cannot be removed, namely: imgrd,
rescue, null and probably a few tty's. After that, put the MAKEDEV script in
/usr/bin and have /usr/etc execute it. A compressed MAKEDEV script is just a
little over 2kB. A handmade script that makes just that what we need could
even be a couple of hundred bytes smaller. Perhaps /dev could be removed and
symlinked to /usr/dev before running MAKEDEV. That way, we could drasticly
decrease the number of inodes of the root filesystem.

* bunzipping bootloader

Rewrite the bootloader and have it uncompress the kernel image on-the-fly. This
will result in the cleanest disk lay-out (bootloader, image.bz2 and image
contains an imgrd that has all the applications installed without the need for
additional uncompression and /dev/rescue tricks). Cleaner, but a lot harder
to implement and currently not worth the effort.

* use 7zip

Perhaps less challenging than having a bunzipping bootloader is porting
7zip/LZMA to Minix. Unless the (de)compression program binary is a lot larger
than bzip2, this could be usefull, as 7zip is able to compress up to 15%
smaller than bzip2 (relative to the compressed bz2 filesize).

* 7unzipping bootloader

et cetera... :)

