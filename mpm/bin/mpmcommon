#! /bin/sh

# Minix Package Manager
#
# Copyright (c) 2006 by Ivo van Poorten.
# All rights reserved.

_myname=`basename $0`

if test "$_myname" = "mpmcommon" ; then
    echo "do not call mpmcommon directly. only use the mpm and mpmsrc wrappers"
    exit 2
fi

PATH=/bin:/usr/bin
export PATH

MPM_WORK=${MPM_WORK-"$MPM_HOME/work"}
export MPM_WORK
MPM_DB=${MPM_DB-"$MPM_HOME/db"}
MPM_ETC=${MPM_ETC-"$MPM_HOME/etc"}
MPM_VERSION="`cat \"$MPM_ETC/version\"`"
MPM_COMMON="$MPM_HOME/bin/mpmcommon"
MPM_MPMS=${MPM_MPMS-"$MPM_HOME/MPMS"}
MPM_SMPMS=${MPM_SMPMS-"$MPM_HOME/SMPMS"}

#. "$MPM_ETC/$_myname.rc"
. "$MPM_ETC/mpm.rc"

_files="details description prebuild build postbuild preinstall postinstall preuninstall postuninstall depsbuild depsinstall attributes"
_files_bmpm="details description preinstall postinstall preuninstall postuninstall filelist depsinstall"
_files_installed="details description preuninstall postuninstall filelist filename"
_directories="FILES PATCHES"
_directories_bmpm=""
_directories_installed="DEPENDSON DEPENDSONME"
_directories_db="0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z"
_details=" name version release source license summary os arch filesize md5sum "
# spaces before and after the detail fields are IMPORTANT!

LC_ALL=C
export LC_ALL

# BSD or SYSV echo?
case `echo -n` in
    -n) _echo_n=""      _echo_c='\c'    ;;
    *)  _echo_n="-n"    _echo_c=""      ;;
esac
case `echo "\r"` in
    "\r")   _echo_e="-e"    ;;
    *)      _echo_e=""      ;;
esac

# colors
case "$TERM" in
    xterm|linux|minix*)
        _echo_bold="[1m"
        _echo_red="[31m"
        _echo_green="[32m"
        _echo_yellow="[33m"
        _echo_cyan="[36m"
        _echo_normal="[0m[39m"
        ;;
    dialog)
        _echo_bold="\Zb"
        _echo_red="\Z1"
        _echo_green="\Z2"
        _echo_yellow="\Z3"
        _echo_cyan="\Z6"
        _echo_normal="\Zn"
        ;;
    *)
        ;;
esac

usage() {
    echo "$_myname version $MPM_VERSION"
    echo ""
    echo "usage:"
    echo ""
    myusage
    exit 2
}

check_help_and_quiet() {
    for i in $@ ; do
        case "$i" in
            -\?|-h|-help|--help)    usage ;;
            -quiet)                 exec 1>/dev/null        ;;
            -really-quiet)          exec 1>/dev/null 2>&1   ;;
        esac
    done
}

rm-f() {
#    rm -if $@
    rm -f "$@"
}

rm-rf() {
    case "$@" in
        /|/usr|/bin|/lib)	error "bug in mpm! trying to rm -rf $@" ;;
    esac
#    rm -irf $@
    rm -rf "$@"
}

echostart() {
    _echostart="$@"
    echo $_echo_n "* $@$_echo_c"
}

echomid() {
    echo $_echo_n "$_echo_cyan$@$_echo_normal$_echo_c"
}

echoend() {
    unset _echostart
    case "$@" in
        failed)     echo "$_echo_red$@$_echo_normal"    ;;
        ok)         echo "$_echo_green$@$_echo_normal"   ;;
        *)          echo "$_echo_yellow$@$_echo_normal" ;;
    esac
}

die() {
    test -n "$_echostart" && echoend "failed"
    echo "$_myname: $@" >&2
    exit 2
}

error() {
    test -n "$_echostart" && echoend "failed"
    echo "$_myname: error: $@" >&2
    exit 2
}

warn() {
    test -n "$_echostart" && _echostart2="$_echostart" && echoend "warning"
    echo "$_myname: warning: $@" >&2
    test -n "$_echostart2" && echostart "$_echostart2" && unset _echostart2
}

check_workdir() {
    echostart "checking working directory: "
    test -d "$MPM_WORK" -a -w "$MPM_WORK" || error "$MPM_WORK is not a writable directory"
    echoend "$MPM_WORK"
}

check_tempdir() {
    echostart "checking temporary directory: "
    test -z "$TEMPDIR" && TEMPDIR="/tmp"

    for i in "$TEMPDIR" /tmp /usr/tmp /usr/local/tmp XnotempdirX ; do
        test -d "$i" -a -w "$i" && break
    done

    test "$i" = "XnotempdirX" && error "cannot find a writable temporary directory"
    export TEMPDIR="$i"
    echoend "$i"
}

# ALWAYS call this before doing anything serious
check_system() {
    gzip=/usr/gnu/bin/gzip
    bzip2=/usr/local/bin/bzip2
    test "$_check_applications" = "no" || check_applications
    check_arch_os
    case "$os" in
        minix)  binsizes xxl >/dev/null ;;	# bug in 3.1.2a no /usr/bin/lex
        *)                      ;;
    esac
    if test -z "$download" ; then
        case "$os" in
            minix)  download="urlget"       ;;
            *)      download="wget -O -"    ;;
        esac
    fi
}

# search_path PATH file
search_path() {
    for p in `echo $1 | tr ':' ' '` ; do
        pp=$p/$2
        test -f $pp -a -x $pp && echomid "$2 " && break
    done
}

# checking applications that are needed for proper operation of mpm
check_applications() {
#    check_tempdir      forget about the tempdir and test tar like touch etc.

    echostart "checking applications: "

    for r in grep cut wc sed touch tar basename tr expr patch find cp \
             mkdir rm pax rev pax rev pwd ; do
        search_path "$PATH" $r || error "cannot find $r"
    done

    search_path "$PATH" uname || error "cannot find uname"
    rp=`( uname -p ) 2>/dev/null`
    rs=`( uname -s ) 2>/dev/null`
    test -n "$rp" -a -n "$rs" || error "uname does not return useful values"
    test "$rp" != "unknown" || error "uname -p returns unknown"
    test "$rs" != "unknown" || error "uname -s returns unknown"

    search_path "/usr/local/bin" "bzip2" || error "cannot find bzip2"
    search_path "/usr/gnu/bin" "gzip" || error "cannot find gzip"

    download=urlget
    search_path "$PATH" urlget

    if test "$?" -ne 0 ; then
        search_path "$PATH" wget || error "cannot find urlget or wget"
        download="wget -O -"
    fi

    echoend ""
}

check_arch_os() {
    arch="`/usr/bin/uname -p | tr '[A-Z]' '[a-z]'`"
    os="`/usr/bin/uname -s | tr '[A-Z]' '[a-z]'`"
}

bzcat() {
    $bzip2 -dc $@
}

# $1 = directory
# $2 = filelist
check_directory() {
    test -d "$1" || error "$1 is not a directory"
    for i in $3 ; do
        test -d "$1/$i" || error "$1 does not contain a $i subdirectory"
    done
    for i in $2 ; do
        test -f "$1/$i" || error "$i is missing from $1"
    done
}

stripws() {
    sed 's/^[ 	]*//' | sed 's/[ 	]*$//'
}

cut_detail() {
    echo "$1" | cut -d ':' -f 2 | stripws
}

cut_detail2() {
    echo "$1" | sed "s/$2//" | stripws
}

__read_details() {
    while true ; do
        read i
        case $i in
            name:*)     _d_name=`cut_detail "$i"`       ;;
            version:*)  _d_version=`cut_detail "$i"`    ;;
            release:*)  _d_release=`cut_detail "$i"`    ;;
            source:*)   _d_source=`cut_detail2 "$i" "source:"`    ;;
            filesize:*) _d_filesize=`cut_detail "$i"`    ;;
            md5sum:*)   _d_md5sum=`cut_detail "$i"`    ;;
            license:*)  _d_license=`cut_detail "$i"`    ;;
            summary:*)  _d_summary=`cut_detail "$i"`    ;;
            os:*)       _d_os=`cut_detail "$i"`    ;;
            arch:*)     _d_arch=`cut_detail "$i"`    ;;
            *)          break                           ;;
        esac
    done
}

read_details() {
    __read_details < "$1"
}

__check_details() {
    while true ; do
        read i
        i=`echo "$i" | cut -d ':' -f 1 | stripws`
        test -z "$i" && break
        case "$_details" in
            *\ $i\ *)   ;;
            *)          warn "unknown field $i specified" ;;
        esac
    done
}

# XXX: FIXME: this is relatively slow. possible fix is to set a bunch of
# dummy variables (eg _count_$i) to zero, read each line of $_details and
# increase counters. error if counter>0, error if counter does not exist
# before increase and error if field is empty. this merges the above function
# plus the two tests below all into one loop and avoids multiple calls to grep
check_details() {
    for i in $_details ; do
        c=`grep -c "$i:" "$1"`
        case $c in
            0)  error "$i is not specified in $1" ;;
            1)  ;;
            *)  error "$i is specified multiple times in $1" ;;
        esac
        j=`grep "$i:" "$1" | cut -d ':' -f 2 | stripws`
        test -n "$j" || error "$i is present but empty"
        case "$i" in
            arch|os)
                case "$j" in
                    yes|no)     ;;
                    *)      error "$i field only allows yes or no ($j)"  ;;
                esac
                ;;
            *) ;;
        esac
    done
    __check_details < "$1"
}

unmangle_smpmname() {
    b=`basename "$1" .src.mpm`
    i=`echo "$b" | rev`
    _s_release=`echo "$i" | cut -d '-' -f 1 | rev`
    _s_version=`echo "$i" | cut -d '-' -f 2 | rev`
    _s_name=`basename "$1" -$_s_version-$_s_release.src.mpm`
}

unmangle_bmpmname() {
    b=`basename "$1" .mpm`
    i=`echo "$b" | rev`
    _b_arch=`echo "$i" | cut -d '-' -f 1 | rev`
    _b_os=`echo "$i" | cut -d '-' -f 2 | rev`
    _b_release=`echo "$i" | cut -d '-' -f 3 | rev`
    _b_version=`echo "$i" | cut -d '-' -f 4 | rev`
    _b_name=`basename "$1" -$_b_version-$_b_release-$_b_os-$_b_arch.mpm`
}

check_db_status_short() {
    echostart "checking database location: "
    test -d "$MPM_DB" || error "there is no database at $MPM_DB"
    echoend "$MPM_DB"

    echostart "checking database signature: "
    test -f "$MPM_DB/MPMDB" || error "mpmdb signature not found"
    echoend "ok"

    echostart "checking structure: "
    _db_installed="$MPM_DB/installed"
    test -d "$_db_installed" || error "there are no contents"
    cd "$_db_installed"
    for i in $_directories_db ; do
        test -d "$i" || error "bucket $_db_installed/$i is missing"
    done
    echoend "ok"
}

relpath_to_abs() {
    if test ! -f "$1" ; then
        echo "$1"
        error "cannot determine path"
    fi
    b="`basename \"$1\"`"
    p="`echo \"$1\" | sed \"s@$b@@\"`"
    test -z "$p" && p="."
    p="`cd \"$p\"; pwd`"
    echo "$p/$b"
}

filesize() {
    if test "$os" = "minix" ; then
        expr -s "$1"
    else
        ls -l "$1" | { read a b c d e f; echo $e; }
    fi
}

# overloaded:
# progress <filename>
# progress NULL <size>
progress() {
    if test ! -f "/usr/local/bin/progmtr" ; then
        cat
    else
        if test -z "$2" ; then
            s=`filesize "$1"`
        else
            s="$2"
        fi
        /usr/local/bin/progmtr -c "$s"
    fi
}

progress2() {
    progress NULL "$1"
}

set_file_attr() {
    owner="$1"
    group="$2"
    mode="$3"
    i="$4"
    if test ! -h $i ; then
        test "$owner" != "-" && chown $owner $i
        test "$group" != "-" && chgrp $group $i
        test "$mode"  != "-" && chmod $mode  $i
    fi
}

set_mul_attr() {
    read i
    while test -n "$i" ; do
        set_file_attr "$1" "$2" "$3" "$i"
        read i
    done
}

set_attributes() {
    reldir="$1"

    cd "$reldir"

    cat "$2" | (
        read owner group mode file
        while test -n "$owner" ; do
            case "$owner" in
                \#*|//*|/\**)
                    read owner group mode file
                    continue
                    ;;
            esac
            case "$file" in
                FILES)
                     find "$reldir" ! -type d | set_mul_attr "$owner" "$group" "$mode"
                    ;;
                DIRECTORIES)
                     find "$reldir" -type d | set_mul_attr "$owner" "$group" "$mode"
                    ;;
                *)
                    for i in ./$file ; do
                        set_file_attr "$owner" "$group" "$mode" "$i"
                    done
                    ;;
            esac
            read owner group mode file
        done
    )
}
