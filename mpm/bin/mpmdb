#! /bin/sh

# Minix Package Manager
#
# Copyright (c) 2006 by Ivo van Poorten.
# All rights reserved.

test -z "$MPM_HOME" && MPM_HOME="/usr/mpm"
export MPM_HOME

i=`echo "$MPM_HOME" | wc -c`
if test "$i" -lt 4 -o "$i" = "/usr" -o "$i" = "/usr/local" ; then
    echo "MPM_HOME is set to $MPM_HOME. that doesn't seem right."
    exit 2
fi

. "$MPM_HOME/bin/mpmcommon" || exit 2

myusage() {
    echo "$_myname <action> [options]"
    echo ""
    echo "actions:"
    echo "  init                initialize new database"
    echo "  status              check status of database"
    echo "  check               check consistency of database"
    echo "  query               query the database"
    echo "  delete              delete complete database (use with caution!)"
    echo ""
    echo "generic options:"
    echo "  -quiet              suppress writing to stdout"
    echo "  -really-quiet       suppress writing to stdout and stderr"
    echo "  -help|--help|-h|-?  print this help message"
    echo ""
    echo "query options:"
    echo "  -all                list all installed packages [default]"
    echo "  -file=<file>        find package that installed <file>"
    echo "  -striproot=<dir>    strip <dir> of the absolute filename <file> for -file"
    echo "                      queries. (useful when doing installs with mpm"
    echo "                      install -root=<dir>)"
    echo ""
}

check_help_and_quiet $@
check_system

action_init() {
    echostart "checking database location: "
    test -d "$MPM_DB" && error "database already exists ($MPM_DB)"
    echoend "$MPM_DB"

    echostart "creating database: "
    mkdir -p "$MPM_DB" && mkdir "$MPM_DB/installed" && touch "$MPM_DB/MPMDB"
    test "$?" -eq 0 || error "failed to create the database"
    cd "$MPM_DB/installed"
    mkdir $_directories_db || error "failed to create database"
    echoend "ok"
}

action_status() {
    check_db_status_short
}

action_check() {
    check_db_status_short

    # check each installed entry for consistency, i.e. all the files are
    # present and, if possible to check (like details), sane
}

action_query() {

    case "$1" in
        all)
            check_db_status_short
            for d in $_directories_db ; do
                b="$MPM_DB/installed/$d"
                cat $b/*/filename 2>/dev/null
            done
            ;;
        file)
            echostart "checking file: "
            test -f "$2" || error "no such file: $2"
            absfile="`relpath_to_abs \"$2\"`"
            echoend "$absfile"

            check_db_status_short

            r=`grep -l "^$absfile\$" $MPM_DB/installed/*/*/filelist`
            test -n "$r" || error "$absfile was not installed by any package"
            for i in $r ; do
                p=`echo "$i" | sed "s@$MPM_DB/installed/\(.*\)/filelist@\1@g"`
                j="$j `cat \"$MPM_DB/installed/$p/filename\"`"
            done
            if test "`echo \"$j\" | wc -w`" -ne 1 ; then
                warn "$absfile seems to be installed by multiple packages"
                warn "uninstalling one of them, will delete this file"
            fi
            echo "$absfile was installed by:"
            for i in $j ; do
                echo "$i"
            done
            ;;
        *)      error "bug! unknown query type" ;;
    esac
}

action_delete() {
    echo ""
    echo "Deleting the database."
    echo "Database location: $_echo_bold$MPM_DB$_echo_normal"
    echo ""
    echo "$_echo_red${_echo_bold}ALL CONTENTS WILL BE LOST!$_echo_normal"
    echo ""
    echo "Are you sure you want to proceed? ('yes' to continue, anything else to abort)"
    read answer

    echo ""
    if test "$answer" != "yes" ; then
        echostart "aborted"
        echoend ""
        exit 0
    fi

    echostart "deleting database: "
    rm-rf "$MPM_DB"
    echoend "ok"
}

# -----------------------------------------------------------------------------

if test $# -eq 0 ; then usage ; fi
_action="$1"
shift 1

_query="all"
_query_arg=""

while test "$#" -ne 0 ; do
    case "$1" in
        -quiet)         exec 1>/dev/null        ;;
        -really-quiet)  exec 1>/dev/null 2>&1   ;;
        -all)           _query=all              ;;
        -file=*)        _query=file
                        _query_arg=`echo "$1" | cut -d '=' -f 2`
                        ;;
        *)              error "parsing command line: unknown option: $1" ;;
    esac
    shift 1
done

case $_action in
    init)       action_init                             ;;
    status)     action_status                           ;;
    check)      action_check                            ;;
    query)      action_query  "$_query" "$_query_arg"   ;;
    delete)     action_delete                           ;;
    *)
        error "parsing command line: unkown action"
        ;;
esac

exit 0
