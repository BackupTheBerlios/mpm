#! /bin/sh

# Minix Package Manager
#
# Copyright (c) 2006 by Ivo van Poorten.
# All rights reserved.

test -z "$MPM_HOME" && MPM_HOME="/usr/mpm"
export MPM_HOME

i=`echo "$MPM_HOME" | wc -c`
if test "$i" -lt 4 -o "$i" = "/usr" -o "$i" = "/usr/local" ; then
    echo "MPM_HOME is set to $MPM_HOME. that doesn't seem right."
    exit 2
fi

_mpm_install_root="/"       # default root for installation

. "$MPM_HOME/bin/mpmcommon" || exit 2

myusage() {
    echo "$_myname <action> [options] <subject>"
    echo ""
    echo "actions:"
    echo "  verify              verify .mpm file <subject> before installation"
    echo "  install             install .mpm file <subject> (default root=/)"
#    echo "  upgrade             upgrade .mpm file <subject>"
    echo "  remove              uninstall package <subject>"
    echo ""
    echo "options:"
    echo "  -quiet              suppress writing to stdout"
    echo "  -really-quiet       suppress writing to stdout and stderr"
    echo "  -help|--help|-h|-?  print this help message"
    echo "  -root=<dir>         specify root directory for install/remove"
    echo "                      (useful for doing installs to a mounted partition"
    echo "                      that will become / later)"
#    echo "  -nodeps             ignore dependencies (use with caution!)"
    echo ""
}

check_help_and_quiet $@
check_system

check_filename() {
    test -f "$1" || error "$1 is not a file"

    echostart "checking filename conventions: "
    _bmpm=`basename "$1"`
    _bmpm_basename=`basename "$_bmpm" .mpm`
    unmangle_bmpmname "$_bmpm"
    test "$_bmpm_basename.mpm" = "$_bmpm" || error "no .mpm extension"
    test "$_b_name-$_b_version-$_b_release-$_b_os-$_b_arch.mpm" = "$_bmpm" || \
        error "correct format should be name-version-release-os-arch.mpm"
    echoend "ok"
}

action_verify_bmpm() {
    check_filename "$1"

    echostart "checking if package is suitable: "
    if test "$_b_os" != "any" ; then
        test "$_b_os" = "$os" || error "this package is not suitable for $os"
    fi
    if test "$_b_arch" != "any" ; then
        test "$_b_arch" = "$arch" || error "this package is not suitable for the $arch architecture"
    fi
    echoend "ok"

    check_workdir

    echostart "unpacking metadata of the archive: "
    cd "$MPM_WORK"
    rm-rf "$MPM_WORK/.mpm"
    cat "$1" | progress "$1" | bzcat | pax -r -p e './.mpm*' || error "error unpacking $1"
    _dotmpmdir="$MPM_WORK/.mpm"
    echoend "ok"

    echostart "checking signature: "
    test -f "$_dotmpmdir/BMPM" || error "$1 is not a .mpm file"
    echoend "ok"

    echostart "checking directory: "
    check_directory "$_dotmpmdir" "$_files_bmpm" "$_directories_bmpm"
    echoend "ok"

    echostart "checking details: "
    check_details "$_dotmpmdir/details"
    echoend "ok"

    echostart "reading details: "
    read_details "$_dotmpmdir/details"
    echoend "ok"

    echostart "checking if details match filename: "
    test "$_b_name" = "$_d_name" || error "name does not match"
    test "$_b_version" = "$_d_version" || error "version does not match"
    test "$_b_release" = "$_d_release" || error "release does not match"
    echoend "ok"

    case "$_action" in
        install|upgrade)    ;; # leave dotmpmdir in place
        *)
            echostart "cleaning up: "
            cd "$MPM_WORK"
            rm-rf "$MPM_WORK/.mpm"
            echoend "ok"
            ;;
    esac
}

action_install_bmpm() {
    check_db_status_short

    check_filename "$1"

    echostart "checking if $_b_name is not in the database: "
    r=`is_installed "$_b_name"`
    test -z "$r" || error "$_b_name is already installed (`cat \"$r/filename\"`)"
    echoend "ok"

    action_verify_bmpm "$1"

    echostart "checking installation root: "
    test -d "$_mpm_install_root" || error "cannot find $_mpm_install_root"
    echoend "$_mpm_install_root"

    echostart "running preinstall script"
    echoend ""
    MPM_INSTALLROOT="$_mpm_install_root"
    export MPM_INSTALLROOT
    sh "$_dotmpmdir/preinstall"     || error "an error occurred during the preinstall script"

    echostart "installing $_b_name to $_mpm_install_root: "
    cd "$_mpm_install_root"
    cat "$1" | progress "$1" | bzcat | pax -r -p e -c './.mpm*'    || error "unable to install $_b_name"
    echoend "ok"

    echostart "updating database: "
    fl=`echo "$_b_name" | sed 's/\(.\).*/\1/'`    # first letter
    _database_entry="$MPM_DB/installed/$fl/$_b_name"
    mkdir "$_database_entry"            || error "unable to update database"
    for i in $_directories_installed ; do
        mkdir "$_database_entry/$i"     || error "unable to update database"
    done
    echo "`basename $1`" > "$_dotmpmdir/filename"
    for i in $_files_installed ; do
        cp "$_dotmpmdir/$i" "$_database_entry/$i"   || error "unable to update database"
    done
    echoend "ok"

    echostart "running postinstall script"
    echoend ""
    sh "$_dotmpmdir/postinstall"     || error "an error occurred during the postinstall script"

    echostart "cleaning up: "
    rm-rf "$_dotmpmdir"
    echoend "ok"
}

action_remove() {
    check_db_status_short

    echostart "checking if $_subject is in the database: "
    r=`is_installed "$_subject"`
    test -n "$r" || error "$_subject is not installed"
    echoend "ok"

    echostart "checking for filelist: "
    _filelist="$r/filelist"
    test -f "$_filelist" || error "cannot find $_filelist"
    echoend "ok"

    echostart "checking installation root: "
    test -n "$_mpm_install_root" || _mpm_install_root="/"
    test -d "$_mpm_install_root" || error "cannot find $_mpm_install_root"
    echoend "$_mpm_install_root"

    echostart "running preuninstall script"
    echoend ""
    MPM_INSTALLROOT="$_mpm_install_root"
    export MPM_INSTALLROOT
    sh "$r/preuninstall"     || error "an error occurred during the preuninstall script"

    echostart "removing files: "
    { cat "$_filelist" ; echo __EOF__ ; } | {
        read line
        while test "$line" != "__EOF__" ; do
            full="$_mpm_install_root$line"
            test -d "$full" || rm -f "$full"
            read line
        done
    }
    echoend "ok"

    echostart "pruning empty directories: "
    { cat "$_filelist" | sort -r ; echo __EOF__ ; } | {
        read line
        while test "$line" != "__EOF__" ; do
            full="$_mpm_install_root$line"
            test -d "$full" && rmdir "$full" 2>/dev/null
            read line
        done
    }
    echoend "ok"

    echostart "running postuninstall script"
    echoend ""
    MPM_INSTALLROOT="$_mpm_install_root"
    export MPM_INSTALLROOT
    sh "$r/postuninstall"     || error "an error occurred during the postuninstall script"

    echostart "updating database: "
    rm-rf "$r"
    echoend "ok"
}

# -----------------------------------------------------------------------------

if test $# -eq 0 ; then usage ; fi
_action="$1"
shift 1

while true ; do
    case "$1" in
        -quiet)         exec 1>/dev/null        ;;
        -really-quiet)  exec 1>/dev/null 2>&1   ;;
        -root=*)        _mpm_install_root=`echo "$1" | cut -d '=' -f 2`      ;;
        -*)             error "parsing command line: unknown option: $1"    ;;
        *)              break;
    esac
    shift 1
done

if test $# -eq 0 ; then
    error "parsing command line: no subject specified"
fi
_subject="$1"
shift 1

if test $# -ne 0 ; then
    error "parsing command line: garbage after subject"
fi

if test "$_action" != "remove" ; then
    _subject="`relpath_to_abs \"$_subject\"`"
    echostart "absolute path to package: "
    echoend "$_subject"
fi

case $_action in
    verify)     action_verify_bmpm "$_subject" ;;
    install)    action_install_bmpm "$_subject" ;;
    upgrade)    ;;
    remove)     action_remove "$_subject" ;;
    *)          error "parsing command line: unkown action"     ;;
esac

exit 0
